var $ = jQuery;

class Actions {

    loader(disabled) {
        if (!disabled) {
            if ($('body').hasClass('no-scroll')) {
                $('#delivery_popup').removeClass('active');
                $('.blur-body').removeClass('active_blur');
                $('body').removeClass('no-scroll');
            } else {
                $('#delivery_popup').addClass('active');
                $('.blur-body').addClass('active_blur');
                $('body').addClass('no-scroll');
            }
        }
    }

    send_timer(node) {
        if ($(node).find('.timer-tip').length) {
            clearInterval(window.timer);

            let $timer_block = $(node).find('.timer-tip');

            $timer_block.removeClass('resend');

            let seconds = $timer_block.data('timer');
            let $timer = $timer_block.find('.send_timer');

            window.timer = setInterval(function () {
                --seconds;
                if (seconds <= 0) {
                    clearInterval(window.timer);
                    $timer_block.addClass('resend');
                    $timer.text($timer_block.data('timer'));
                    if (window.smartCaptchaEnabled && window.smartCaptcha) {
                        window.resendCodeWidgetId = window.smartCaptcha.render(
                            'resend-code-captcha-container', window.smartCaptchaConfig
                        );
                    }
                } else { // Иначе
                    //let strTimer = ${seconds};
					let strTimer = `${seconds}`;
                    $timer.text(strTimer);
                }
            }, 1000);
        }

    }


    checkError() {
        this.$elem.toggleClass('_error');
    }

    initScripts() {
        var datePicker = $('body').find('[data-datePicker]'),
            startDate = datePicker.attr('min'),
            endDate = datePicker.attr('max');

        var options = {};

        if (startDate) {
            options.startDate = new Date(startDate);
        }

        if (endDate) {
            options.endDate = new Date(endDate);
        }

        datePicker.datepicker(options);
    }

    onepageRequest(data) {
        let self = this;
        $.ajax('/local/api/checkout/actions.php', {
            data: data,
            type: "POST",
            error: function (e) {
                console.log('Something went wrong. Please try again.');
            },
            success: function (response) {
                let $page = $('body').find('[data-ajax-order-result]');
                let resp = JSON.parse(response);
                if (resp.createOrder) {
                    window.location.href = resp.redirect;
                    return;
                }
                $('.page.order-page').html(resp.body);
                self.initScripts();
                $(document).trigger('onepage-checkout-updated');
            }
        });
    }

    applyResponse($page, response) {
        // this.loader();
        $('#delivery_popup').removeClass('active');
        $('.blur-body').removeClass('active_blur');

        if (!$('#cart_popup').hasClass('active')) {
            $('body').removeClass('no-scroll');
        }

        let resp = JSON.parse(response);

        if (resp.status === 'exit' && resp.redirect !== '') {
            window.location.replace(resp.redirect);

            return false;
        }

        if (resp.status && resp.body) {
            $page.html(resp.body);
            this.initScripts();
        } else {
            if (this.$elem !== null) {
                this.checkError();
            } else {
                alert('Smth went wrong');
            }
        }

        this.$elem = null;
    }

    basketUpdate(response) {
        let $page = $('#cart_popup').find('[data-ajax-result]');
        this.applyResponse($page, response);
    }

    basketUpdateNewPage(response) {
        let resp = JSON.parse(response);
        $('.page.order-page').html(resp.body);
        this.initScripts();
        $(document).trigger('onepage-checkout-updated');
    }
    basketUpdatePage(response) {
        let $page = $('.page').find('[data-ajax-result]');
        this.applyResponse($page, response);

        let resp = JSON.parse(response);
        let promoBlock = $page.find('.promo-block');
        if (!resp.status) {
            promoBlock.addClass('error');
            promoBlock.find('h4').html(resp.message);
        }
    }

    orderUpdate(response) {
        let $page = $('body').find('[data-ajax-order-result]');

        this.applyResponse($page, response);
    }

    registerInPageAction(response) {

        let resp = JSON.parse(response),
            $wrapper = $('.sign-up-page');

        if (resp.status == 'error') {
            $wrapper.find('.submit-btn').prop('disabled', false);
            $wrapper.find('.warning-message').addClass('active').find('span').html(resp.message);

            $wrapper.find('.login_popup').unbind('click').on('click', function (e) {
                $('.ajax_pop_link').trigger('click');
            });

            // if (window.smartCaptcha) {
            //     window.smartCaptcha.reset(window.registerWidgetId);
            // }

            return;
        }

        if (resp.need_redirect == 'Y') {
            window.location.replace(resp.redirect_url + 'personal/info/');

            return;
        }

        window.location.reload();
    }

    registerAction(response) {
        this.loader();
        let resp = JSON.parse(response);

        if (resp.status == 'error') {
            $('#RegisterPopup').find('.submit-btn').prop('disabled', false);
            $('#RegisterPopup .warning-message').addClass('active').find('span').html(resp.message);

            $('#RegisterPopup').find('.login_popup').unbind('click').on('click', function (e) {
                $('.ajax_pop_link').trigger('click');
            });
            // if (window.smartCaptcha) {
            //     window.smartCaptcha.reset(window.registerWidgetId);
            // }
            return;
        }

        if (resp.need_redirect == 'Y') {
            window.location.replace(resp.redirect_url + 'personal/info/');
            return;
        }

        window.location.reload();
    }

    authorizeInPageCodeShow(response) {
        let $wrapper = $('body').find('.auth-form-wrapper');

        let $authForm = $wrapper.find('#AuthForm');
        let $codeForm = $wrapper.find('#EnterCode');

        let $autFormDescr = $codeForm.find('.descr');
        let $autFormAction = $codeForm.find('h4');

        let resp = response.data;

        if (resp.type === 'error') {
            let errorMessage = '';

            if (resp.messages) {
                errorMessage = resp.messages.error;
            } else {
                errorMessage = (response.errors[0] || {}).message;
            }
            $authForm.find('.warning-message .message-text').text(errorMessage);
            $authForm.find('.warning-message').fadeIn(200);
            $wrapper.find('.submit-btn').prop('disabled', false);

            // if (window.smartCaptcha) {
            //     window.smartCaptcha.reset(window.loginByPhoneWidgetId);
            // }
        } else {
            $autFormDescr.html(resp.messages.label);
            $autFormAction.html(resp.messages.action);

            $authForm.fadeOut(0);
            $codeForm.fadeIn(200);
            this.send_timer($wrapper[0]);
        }
    }

    authorizeCodeShow(response) {
        let $popup = $('body').find('#LoginPopup');

        let $authForm = $popup.find('#AuthFormInPopup');
        let $codeForm = $popup.find('#EnterCodeInPopup');

        let $autFormDescr = $codeForm.find('.descr');
        let $autFormAction = $codeForm.find('h4');

        this.loader();
        let resp = response.data;

        if (resp.type === 'error') {
            let errorMessage = '';
            if (resp.messages) {
                errorMessage = resp.messages.error;
            } else {
                errorMessage = (response.errors[0] || {}).message;
            }
            $authForm.find('.warning-message .message-text').text(errorMessage);
            $authForm.find('.warning-message').fadeIn(200);
            $popup.find('.submit-btn').prop('disabled', false);
            // if (window.smartCaptcha) {
            //     window.smartCaptcha.reset(window.loginByPhoneWidgetId);
            // }
        } else {
            $autFormDescr.html(resp.messages.label);
            $autFormAction.html(resp.messages.action);

            $authForm.fadeOut(0);
            $codeForm.fadeIn(200);

            this.send_timer($popup[0]);
        }
    }

    checkCodeAction(response) {
        let $popup = $('body').find('#LoginPopup');

        this.loader();
        let resp = JSON.parse(response);

        if (resp.type === 'success') {
            window.location.reload();
        } else {
            $('#EnterCodeInPopup .warning-message').fadeIn(200);
            $('#EnterCodeInPopup input').each(function () {
                $(this).val('');
            });
            $('#EnterCodeInPopup input:first').focus();
        }
    }

    miniBasketShow(response) {
        let $page = $('body').find('#cart_popup [data-ajax-result]');
        this.applyResponse($page, response);
        let count = $page.find('.order-details .order-row').length;
        $('.cart-btn').click();
        $('.cart-btn.icon-cart').addClass('active').find('.count').text(count);
    }

    oderRedirect(response) {

        let resp = JSON.parse(response);
        if (resp['status'] === true) {
            window.location.replace("/cart/");
        } else {
            console.log('error');
        }

    }

    basketUpdateAfterDelete(response) {
        let $page = $('#cart_popup').find('[data-ajax-result]');
        this.applyResponse($page, response);
        let count = $page.find('.order-details .order-row').length;

        if (!$('.cart-page').length) {
            $('.cart-btn').click();
        }

        if (count == 0) {
            $('.cart-btn.icon-cart').removeClass('active').find('.count').text('');
        } else {
            $('.cart-btn.icon-cart').addClass('active').find('.count').text(count);
        }
    }
    basketUpdateAfterDeletePage(response) {
        let $page = $('.page').find('[data-ajax-result]');
        this.applyResponse($page, response);
        let count = $page.find('.order-details .order-row').length;
        if (count == 0) {
            $('.cart-btn.icon-cart').removeClass('active').find('.count').text('');
        } else {
            $('.cart-btn.icon-cart').addClass('active').find('.count').text(count);
        }
    }

    setCookie(name, value, options = {}) {
        options = {
            path: '/',
            ...options
        };

        if (options.expires instanceof Date) {
            options.expires = options.expires.toUTCString();
        }

        let updatedCookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);

        for (let optionKey in options) {
            updatedCookie += "; " + optionKey;
            let optionValue = options[optionKey];
            if (optionValue !== true) {
                updatedCookie += "=" + optionValue;
            }
        }

        document.cookie = updatedCookie;
    }

    sendBasketMindbox() {
        if (!mindbox) return;

        $.ajax({
            url: '/local/api/basket/basketListMindbox.php',
            type: "POST",
            dataType: 'json',
            beforeSend: () => {
                // this.loader(noloader);
            },
            error: (xhr, status, error) => {
                console.error('AJAX Error:', status, error);
            }
        }).done(response => {
            if (!response) {
                console.log('Empty response from server');
                return;
            }
            const customer = {
                "email": response.user.email,
                "mobilePhone": response.user.mobilePhone,
            }

            const productList = response.list.map(item => ({
                product: {
                    ids: {
                        website: String(item.product.ids.website) // Гарантируем строку
                    }
                },
                count: parseFloat(item.count),
                pricePerItem: parseFloat(item.pricePerItem)
            }));

            mindbox("async", {
                operation: "Website.SetCart",
                data: {
                    customer: customer,
                    productList: productList
                }
            });
            console.log('Server response:', response);

        });
    }

    ajax(url, data, handler, $elem, noloader) {
        this.$elem = $elem;

        $.ajax(url, {
            data: data,
            type: "POST",
            beforeSend: () => {
                // this.loader(noloader);
            },
            error: function (e) {
                console.log(e);
                alert(e);
            },
            success: handler.bind(this)
        }).done((code) => { 
            this.sendBasketMindbox();
            /*
            if (mindbox && code != '') {
                let ob = JSON.parse(code);
                if (ob.type === 'basketAdd') {
                    const customer = {
                        "email": ob.USER.EMAIL,
                        "mobilePhone": ob.USER.PHONE
                    }
                    let productList = {
                        product: {
                            ids: {
                                website: ob.tovar.ID
                            }
                        },
                        // productGroup: {
                        //     ids: {
                        //         website: ob.tovar.IBLOCK_SECTION_ID
                        //     }
                        // },
                        count: 1,
                        pricePerItem: ob.tovar.PRICE,
                    };
                    // console.log(productList);
                    mindbox("async", {
                        operation: "Website.SetCart",
                        data: {
                            customer: customer,
                            productList: [
                                productList
                            ]
                        }
                    });
                }
            
            }*/

        });
    }


    ajaxForForm(url, data, handler, $elem) {
        this.$elem = $elem;

        $.ajax(url, {
            data: data,
            type: "POST",
            processData: false,
            contentType: false,
            beforeSend: () => {
                this.loader();
            },
            error: function () {
                alert("error");
            },
            success: handler.bind(this)
        });
    }

    simlpleAjax(url, data) {
        $.ajax(url, {
            data: data,
            type: "POST"
        }).done(function (code) {
            if (mindbox && code != '') {
                let ob = JSON.parse(code);
                let operation;

                const productList = ob.offers.map(item => ({
                    product: {
                        ids: {
                            website: item.ID.toString() 
                        }
                    },
                    count: 1,
                    pricePerItem: Number(item.PRICE) 
                }));
                console.log(productList);
                
                const customer = {
                    "email": ob.USER.EMAIL,
                    "mobilePhone": ob.USER.PHONE
                }

                if (ob.EVENT !== 'wish')
                    return false;

                // if (ob.ACTION === 'add') {
                    operation = "Website.SetWishList";
                    mindbox("async", {
                        operation: operation,
                        data: {
                            customer: customer,
                            productList: productList
                        }
                    });
                // }


                // if (ob.ACTION === 'remove') {
                //     operation = "Website.RemoveFromWishList";
                // }



            }
        });
    }

    fav(data) {
        this.simlpleAjax('/local/api/wish/wish.php', data);
    }

    changeQuantity(data, data2) {
        this.ajax('/local/api/basket/quantity.php', data, this.basketUpdate, null, true);

        if (data2) {
            this.ajax('/local/api/basket/quantity.php', data2, this.basketUpdatePage, null, true);
        }

    }

    changeNewQuantity(data2) {
        this.ajax('/local/api/basket/quantity.php', data2, this.basketUpdateNewPage, null, true);
    }

    deleteItem(data, data2) {
        this.ajax('/local/api/basket/delete.php', data, this.basketUpdateAfterDelete, null);
        console.log('11111111111111');
        if (data2) {
            this.ajax('/local/api/basket/delete.php', data2, this.basketUpdateAfterDeletePage, null);
        }
    }

    newDeleteItem(data2) {
        this.ajax('/local/api/basket/delete.php', data2, this.basketUpdateNewPage, null);
    }

    addItem(data) {
        this.ajax('/local/api/basket/add.php', data, this.miniBasketShow, null);
    }

    byOneClick(data) {
        this.ajax('/local/api/basket/oneClick.php', data, this.oderRedirect, null);
    }

    usePromocode(data, $elem) {
        this.ajax('/local/api/basket/promocode.php', data, this.basketUpdatePage, $elem);
    }

    useNewPromocode(data, $elem) {
        this.ajax('/local/api/basket/promocode.php', data, this.basketUpdateNewPage, $elem, false);
    }

    orderStep(data, $elem) {
        this.ajax('/local/api/order/actions.php', data, this.orderUpdate, $elem);
    }

    authorizeInPage(data) {
        BX.ajax.runAction(
            'mygento_base.User.authorize',
            { data: data }
        ).then(this.authorizeInPageCodeShow.bind(this)).catch(function (e) {
            e.data = { 'type': 'error' };
            this.authorizeInPageCodeShow.apply(this, [e]);
        }.bind(this));
    }

    authorize(data) {
        BX.ajax.runAction(
            'mygento_base.User.authorize',
            { data: data }
        ).then(this.authorizeCodeShow.bind(this)).catch(function (e) {
            e.data = { 'type': 'error' };
            this.authorizeCodeShow.apply(this, [e]);
        }.bind(this));
    }

    registerInPage(data) {
        this.ajax('/local/api/user/register.php', data, this.registerInPageAction, null);
    }

    register(data) {
        this.ajax('/local/api/user/register.php', data, this.registerAction, null);
    }

    checkCode(data) {
        this.ajax('/local/api/user/checkCode.php', data, this.checkCodeAction, null);
    }

    sendRequest(data, $elem) {
        this.ajaxForForm('/local/api/form/size.php', data, this.thanksShow, $elem);
    }

    thanksShow(response) {
        if (response.status == 'error') {
            $('.js-size-request-form').find('.error').html(response.message);
        } else {
            $('.js-size-request-form').html(response.message);
        }
    }

    personalOrder(data, $elem) {
        this.ajaxForForm('/local/api/form/personal.php', data, this.personalOk, $elem);
    }

    personalOk(response) {
        this.$elem.html(response);
        this.loader();
        $('.order-page').addClass('order-confirm-page').removeClass('order-page');
    }
}

class Validate {

    constructor(form) {
        this.form = form;

        this.ckeckFields();
    }

    ckeckFields() {
        let $fields = this.form.find('input, textarea, select');
        var errors = [];
        $.each($fields, function (index, $field) {
            $($field).parent().removeClass('_error');
            $($field).removeClass('_error');
            switch ($field.type) {
                case 'text':
                case 'tel':
                case 'email':
                    var valid = true;
                    if ($field.type === 'email') {
                        valid = !(/[!#$%^&*()<>?/|}{~:+]/.test($field.value))
                            && /^([a-z0-9,!\#\$%&'\*\+\/=\?\^_\{\|\}~-]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z0-9,!\#\$%&'\*\+\/=\?\^_\{\|\}~-]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*@([a-z0-9-]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z0-9-]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*\.(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]){2,})$/i.test($field.value);
                    }
                    if ($field.type === 'tel') {
                        valid = $field.value.length == $field.getAttribute('maxlength');

                        if ($field.inputmask) {
                            valid = $field.inputmask.isComplete();
                        } else {
                            let inputMaskInstance = window.intlTelInput.getInstance($field);

                            if (inputMaskInstance.isValidNumber()) {
                                valid = true;
                            } else {
                                valid = false;
                            }
                        }
                    }
                    if ($field.type === 'text') {
                        valid = $field.value.length >= $field.getAttribute('minlength');
                    }
                    if (!valid || ($field.required && $field.value === '')) {
                        let error = {
                            'field': $field,
                            'type': 'error',
                            'text': 'Заполните поле'
                        };
                        errors.push(error);
                    }
                    break;
                case 'checkbox':
                    if (!$field.required || $field.checked) {
                        break;
                    }
                    errors.push({
                        'field': $field,
                        'type': 'error',
                        'text': 'Заполните поле'
                    })
                    break;
                case 'textarea':
                    if (!$field.required || $field.value.length > 0) {
                        break;
                    }
                    let error = {
                        'field': $field,
                        'type': 'error',
                        'text': 'Заполните поле'
                    };
                    errors.push(error);
                case 'radio':
                    var buttons = $($field).parents('.radio-btns');
                    if (buttons.css('visibility') == 'hidden') {
                        break;
                    }
                    var checkedButtons = buttons.find('input:checked');
                    if (checkedButtons.length <= 0) {
                        let error = {
                            'field': $field,
                            'type': 'error',
                            'text': 'Заполните поле'
                        };
                        errors.push(error);
                    }
                    break;
                case 'select':
                    break;
            }
        });

        this.errors = errors;
    }

    init() {
        if (this.errors.length > 0) {
            $.each(this.errors, function (index, error) {
                $(error.field).parent().addClass('_error');
                $(error.field).addClass('_error');
            });

            return false;
        }

        return true;
    }
}

function formattingNumbers(elem) {
    var mask = window.PHONE_MASKS ?? '+7';
    var num = elem.value.replace(mask, '').replace(/\D/g, '').split(/(?=.)/), i = num.length;
    if (0 <= i) num.unshift(mask);

    if (window.BASE_SITE_ID == 'ae') {
        if (1 <= i) num.splice(1, 0, ' ');
        if (3 <= i) num.splice(4, 0, ' ');
        if (6 <= i) num.splice(8, 0, '-');
    } else {
        if (1 <= i) num.splice(1, 0, ' ');
        if (4 <= i) num.splice(5, 0, ' ');
        if (7 <= i) num.splice(9, 0, '-');
        if (9 <= i) num.splice(12, 0, '-');
        if (11 <= i) num.splice(15, num.length - 15);
    }

    elem.value = num.join('');
}

function getCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}

$(document).on('initTelInput', function () {
    if ($('.phone-group').length) {
        $('.phone-group input').intlTelInput({
            initialCountry: window.BASE_SITE_ID == 's1' ? 'ru' : 'ae',
            nationalMode: false,
            allowDropdown: false,
            onlyCountries: ['ae', 'ru']
        });
    }
})

$(document).on('initTelMask', function () {
    if (typeof window.Inputmask != 'undefined') {
        const $phones = $('input[type="tel"]');

        $phones.each(function () {
            if (!$(this).is('.personal-phone')) {
                new Inputmask({ mask: window.PHONE_MASKS, clearMaskOnLostFocus: false }).mask($(this));
            }
        });
    }
});

// function authorizeClick(token) {
function authorizeClick() {
    $(this).find('.submit-btn').prop('disabled', true);
    let $input = $(this).find('[name="enterData"]')

    var validate = new Validate($(this));

    if (!validate.init()) {
        $(this).find('.submit-btn').prop('disabled', false);
        return;
    }
    var data = {
        enterData: $input.val(),
        // token: token
    };

    $('body').find('.warning-message').fadeOut(200);

    let actions = new Actions();

    if ($(this).closest('.login-block') && $(this).closest('.login-block').length && $(this).closest('.login-block').is('.auth-page')) {
        actions.authorizeInPage(data);
    } else {
        actions.authorize(data);
    }
}

function registerFormClick() {
    let actions = new Actions();

    if ($(this).is('.in-page')) {
        actions.registerInPage($(this).serialize());
    } else {
        actions.register($(this).serialize());
    }
}

$(document).ready(function () {
    let actions = new Actions();

    window.addEventListener('scroll', function () {
        if (!window.matchMedia("(min-width: 960px)").matches) {
            return;
        }
        $('.dropdown-menu').trigger('mouseleave');
    });

    function getHashByStep(step) {
        var hash = {
            '1': 'login',
            '2': 'address',
            '3': 'delivery',
            '4': 'payment',
            '5': 'confirm'
        };

        return hash[step] ?? '#login';
    }

$(this).on('click', '.fav-link', function (e) {
    e.preventDefault();
    let product = $(this).data('id');
    let offer = $(this).data('offer') || 0;
    let data = {
        product: product,
        offer: offer
    };
    actions.fav(data);
});

    $(this).on('change', '[data-quantity]', function () {
        let id = $(this).closest('[data-id]').data('id');
        // let cartType = $(this).parents('[data-cart-type]').data('cart-type');

        let quantity = $(this).val();

        let data = {
            id: id,
            quantity: quantity,
            cartType: 'mini',
            component: 'enlimited:sale.basket'
        };

        let data2;

        if ($('.cart-page').length) {
            data2 = {
                id: id,
                quantity: quantity,
                cartType: 'page',
                component: 'enlimited:sale.basket'
            };
        }

        actions.changeQuantity(data, data2);
    });


    $(this).on('click', '[data-ajax-delete]', function () {
        let id = $(this).closest('[data-id]').data('id');
        // let cartType = $(this).parents('[data-cart-type]').data('cart-type');

        let data = {
            id: id,
            cartType: 'mini',
            lang: getCookie('SiteLang'),
            component: 'enlimited:sale.basket'
        };

        let data2;

        if ($('.cart-page').length) {
            data2 = {
                id: id,
                cartType: 'page',
                lang: getCookie('SiteLang'),
                component: 'enlimited:sale.basket'
            };
        }

        actions.deleteItem(data, data2);
    });

    $(this).on('click', '[data-quantity-button]', function () {
        let $input = $(this).parent().find('[data-quantity]');
        let oldValue = parseInt($input.val());
        let newValue;

        if ($(this).data('action') == 'plus') {
            newValue = oldValue + 1;
        } else {
            if (oldValue <= 1) return false;
            newValue = oldValue - 1;
        }

        $input.val(newValue).change();
    });

    $(this).on('click', '[data-add-button]', function () {
        if ($(this).data('request-offer') == '1') {
            $('.sizes-block .js-offer:first').trigger('click');
            return;
        }
        if ($(this).data('can-buy') == '0' && $(this).data('has-size-grid') == '1') {
            return;
        }
        let id = $(this).data('product-id');
        let data = {
            id: id,
            lang: getCookie('SiteLang')
        };

        actions.addItem(data);
    });

    $(this).on('click', '[data-one-click]', function () {
        console.log('one-click');

        if ($(this).data('request-offer') == '1') {
            $('.sizes-block .js-offer:first').trigger('click');
            return;
        }
        if ($(this).data('can-buy') == '0' && $(this).data('has-size-grid') == '1') {
            return;
        }
        let id = $(this).data('product-id');
        let data = {
            id: id,
            lang: getCookie('SiteLang')
        };
        console.log(data);

        actions.byOneClick(data);
    });

    $(this).on('click', '[data-ajax-step]', function (e) {
        e.preventDefault();

        let step = $(this).data('ajax-step');
        let type = $(this).data('type');
        let stepForHash = step + 1;

        if (step == 1 && type == 'prev') {
            window.location.replace('/cart/');
            return false;
        }

        let $form = $('body').find('[data-ajax-order-form]');

        if (type !== 'prev') {
            let validate = new Validate($form);

            if (!validate.init()) {
                return false;
            }
        }

        if (type == 'prev') {
            stepForHash = step - 1;
        }

        window.location.hash = getHashByStep(stepForHash);

        let formData = $form.serializeArray();
        let data = {
            step: step,
            type: type,
            form: formData,
            lang: getCookie('SiteLang')
        };

        actions.orderStep(data);
    });

    $(this).on('submit', '[data-ajax-promocode]', function (e) {
        e.preventDefault();
        var $input = $(this).find('input');
        var action = $(this).data('action')
        var cartType = $(this).parents('[data-cart-type]').data('cart-type');

        if (action === 'clear') {
            $input.val('');
        }

        var data = {
            promocode: $input.val(),
            action: $(this).data('action'),
            cartType: cartType,
            component: 'enlimited:sale.basket'
        };

        actions.usePromocode(data, $input);
    });
    $(this).on('submit', '[data-ajax-return-request]', function (e) {
        e.preventDefault();
        $.ajax(jQuery(this).attr('action'), {
            data: jQuery(this).serializeArray(),
            type: 'POST',
            error: function () {
                alert("error");
            },
            success: function (responseData) {
                var response = JSON.parse(responseData);
                jQuery(this).next().html(response.message).show();
                jQuery(this).hide();
            }.bind(this)
        });
    });

    $(this).on('submit', '[data-ajax-enter]', function (e) {
        e.preventDefault();
        let submitButton = $(this).find('.submit-btn');
        submitButton.prop('disabled', true);
        let $input = $(this).find('[name="enterData"]')

        var validate = new Validate($(this));

        if (!validate.init()) {
            submitButton.prop('disabled', false);
            return;
        }

        // if (!window.smartCaptchaEnabled) {
        //     authorizeClick.apply(this, ['']);
        //     return;
        // }

        // if (window.smartCaptchaEnabled && !window.smartCaptcha) {
        //     submitButton.prop('disabled', false);
        //     return;
        // }

        // let captchaID;

        // if ( $(this).is('#loginByPhoneInPage') ) {
        //     captchaID = window.loginByPhoneInPageWidgetId;
        // } else {
        //     captchaID = window.loginByPhoneWidgetId;
        // }

        // let token = window.smartCaptcha.getResponse(captchaID);

        // if (token != '') {
        // authorizeClick.apply(this, [token]);
        authorizeClick.apply(this);
        return;
        // }

        // if (!window.captchaTokenByPhoneInited) {
        //     window.smartCaptcha.subscribe(
        //       captchaID,
        //       'success',
        //       authorizeClick.bind(this)
        //     );
        //     window.smartCaptcha.subscribe(
        //       captchaID,
        //       'challenge-hidden',
        //       function () {
        //           submitButton.prop('disabled', false);
        //       }.bind()
        //     );
        //     window.captchaTokenByPhoneInited = true;
        // }

        // window.smartCaptcha.execute(captchaID);
    });

    $(this).on('submit', '[data-ajax-register]', function (e) {
        e.preventDefault();
        let submitButton = $(this).find('.submit-btn');
        submitButton.prop('disabled', true);

        var validate = new Validate($(this));

        if (!validate.init()) {
            submitButton.prop('disabled', false);
            return;
        }

        // if (!window.smartCaptchaEnabled) {
        //     registerFormClick.apply(this, [this]);
        //     return;
        // }

        // if (window.smartCaptchaEnabled && !window.smartCaptcha) {
        //     submitButton.prop('disabled', false);
        //     return;
        // }

        $(this).find('.warning-message').removeClass('active').find('span').html('');
        // let token = window.smartCaptcha.getResponse(window.registerWidgetId);

        // if (token != '') {
        registerFormClick.apply(this, [this]);
        return;
        // }

        // if (!window.captchaTokenRegisterInited) {
        //     window.smartCaptcha.subscribe(
        //       window.registerWidgetId,
        //       'success',
        //       registerFormClick.bind(this)
        //     );
        //     window.smartCaptcha.subscribe(
        //       window.registerWidgetId,
        //       'challenge-hidden',
        //       function () {
        //           submitButton.prop('disabled', false);
        //       }
        //     );
        //     window.captchaTokenRegisterInited = true;
        // }

        // window.smartCaptcha.execute(window.registerWidgetId);

        // actions.register($(this).serialize());
    });

    $(this).on('submit', '[data-checkcode-ajax]', function (e) {
        e.preventDefault();
        let $input = $(this).parents('.login-block').find('[data-active-form=1]').find('[name="enterData"]');

        var data = {
            enterData: $input.val(),
        };

        if (!window.smartCaptchaEnabled) {
            actions.authorize(data);
            return;
        }

        let token = window.smartCaptcha.getResponse(window.resendCodeWidgetId);

        if (token != '') {
            data['token'] = token;
            actions.authorize(data);
            return;
        }

        if (!window.captchaTokenResendInited) {
            window.smartCaptcha.subscribe(
                window.resendCodeWidgetId,
                'success',
                function () {
                    data['token'] = window.smartCaptcha.getResponse(window.resendCodeWidgetId);
                    actions.authorize(data);
                }
            );
            window.smartCaptcha.subscribe(
                window.resendCodeWidgetId,
                'challenge-hidden'
            );
            window.captchaTokenResendInited = true;
        }

        window.smartCaptcha.execute(window.resendCodeWidgetId);
    });

    $(this).on('submit', '[data-check-code]', function (e) {
        e.preventDefault();

        let form = document.body.querySelector('form[data-ajax-order-form]'),
            phone = document.body.querySelector('input[name=phone]').value;

        if (!phone) {
            phone = document.body.querySelector('input.js-order-phone').value;
        }

        var data = {
            code: window.codePhone,
            phone: phone,
        };

        BX.ajax({
            'url': '/local/api/user/checkPhoneCode.php',
            data: data,
            method: 'POST',
            onsuccess: function (msg) {
                let response = JSON.parse(msg);

                if (response.type == 'error') {
                    $('#CheckPhonePopup .warning-message').fadeIn(200);
                    return;
                }
                localStorage.setItem('smsConfirmed', 1);
                BX("CheckPhonePopup").querySelector('.pop-close').click();
                $('.customer-form input[name="phone"]').trigger('change');
            }
        });
    });

    $(this).on('keyup', '[data-check-code] input', function (e) {
        let keyCode = e.keyCode;

        if ((keyCode < 48 && keyCode !== 8 || keyCode > 57) && (keyCode < 96 || keyCode > 105)) {
            e.preventDefault();
            $(this).val('');
            return false;
        }

        let value = $(this).val();
        let len = value.length;
        let codeInput = $(this).parent().parent();
        let tabIndex = parseInt($(this).attr('tabindex'));

        if (keyCode === 8) {
            codeInput.find('[tabindex=' + (tabIndex - 1) + ']').val('').focus();
            return false;
        }

        var code = '';
        codeInput.find('input').each(function () {
            if ($(this).val() !== '') {
                code += $(this).val();
            }
        });

        if (code.length == 4) {
            window.codePhone = code;
            return false;
        }

        if (len > 0) {
            codeInput.find('[tabindex=' + (tabIndex + 1) + ']').focus();
        }
    });

    $(this).on('keyup', '[data-checkCode-ajax] input', function (e) {
        let keyCode = e.keyCode;

        if ((keyCode < 48 && keyCode !== 8 || keyCode > 57) && (keyCode < 96 || keyCode > 105)) {
            e.preventDefault();
            $(this).val('');
            return false;
        }

        let value = $(this).val();
        let len = value.length;

        let tabIndex = parseInt($(this).attr('tabindex'));

        if (keyCode === 8) {
            $('.code-inputs [tabindex=' + (tabIndex - 1) + ']').val('').focus();
            return false;
        }

        var code = '';
        $('.code-inputs input').each(function () {
            if ($(this).val() !== '') {
                code += $(this).val();
            }
        });

        if (code.length == 4) {
            var data = {
                code: code,
                sendTo: $(this).parents('.login-block').find('[data-active-form=1]').find('[name="enterData"]').val()
            };

            $('#EnterCodeInPopup .warning-message').fadeOut(200);
            actions.checkCode(data);

            return false;
        }

        if (len > 0) {
            $('.code-inputs [tabindex=' + (tabIndex + 1) + ']').focus();
        }
    });

    $(this).on('focus', '[data-checkCode-ajax] input', function () {
        let tabIndex = parseInt($(this).attr('tabindex'));
        let prevVal = $('.code-inputs [tabindex=' + (tabIndex - 1) + ']').val();
        if ($(this).val() == '' && tabIndex !== 1 && prevVal === '') {
            $('.code-inputs [tabindex=' + (tabIndex - 1) + ']').focus();
        } else if ($(this).val() !== '' && tabIndex !== 4) {
            $('.code-inputs [tabindex=' + (tabIndex + 1) + ']').focus();
        }
    });

    $(document).trigger('initTelMask');

    $(this).on('click', '.cart-pop-close', function () {
        $('#cart_popup').removeClass('active');
        $('.blur-body').removeClass('active_blur');
        $('body').removeClass('no-scroll');
    });

    $(this).on('click', '.delivery-type a', function () {
        if ($(this).hasClass('disabled')) {
            return false;
        }

        let type = $(this).data('type');
        let step = $(this).data('step');

        $(this).addClass('active').siblings().removeClass('active');
        $('body').find('[name="deliveryType"]').val(type);
        let $newAddressBlock = $('[data-delivery-tab="' + type + '"]').siblings();

        $('body').find('[data-delivery-tab="' + type + '"]').addClass('_active').siblings().removeClass('_active');
        $('body').find('[data-delivery-tab="' + type + '"]').find('input[type="text"], input[type="tel"]').val('');
        $('body').find('[data-delivery-tab="' + type + '"]').find('input[type="radio"]').first().prop('checked', true);

        if (type === 'pickup') {
            $newAddressBlock.find('[data-required]').prop('required', false);
        } else {
            if ($('.address-btns input:checked').attr('id') === 'add_new_address') {
                $newAddressBlock.find('[data-required]').prop('required', true);
            }
        }
    });

    $(this).on('change', 'input[name="address"]', function () {
        let id = $(this).attr('id');
        let $newAddressBlock = $('.new-address-block');

        if (id === 'add_new_address') {
            $newAddressBlock.find('[data-required]').prop('required', true);
        } else {
            $newAddressBlock.find('[data-required]').prop('required', false);
        }
    });

    $(document).on('submit', '.js-size-request-form', function (e) {
        e.preventDefault();
        var $form = new FormData($(this)[0]);
        actions.sendRequest($form, $(this)[0]);
    });

    $(document).on('change', '.js-sort-radio', function () {
        var url = $(this).val();
        if (url != "") {
            window.location.href = url;
        }
    });

    $(this).on('click', '.lang-list a', function () {
        console.log($(this).attr('href'));
    });

    $(this).on('click', '.enter-btn, .ajax_pop_link', function (event) {
        event.preventDefault();
        event.stopPropagation();
        $('#LoginPopup').addClass('active');
        $('#RegisterPopup').find('.warning-message').removeClass('active').find('span').html('');
        $('.blur-body').addClass('active_blur');
        $('body').addClass('no-scroll');

        /*if (window.smartCaptcha) {
            window.loginByPhoneWidgetId = window.smartCaptcha.render(
              'login-by-phone-captcha-container', window.smartCaptchaConfig
            );
        	
            if( $('.login-by-phone-page-captcha-container') && $('.login-by-phone-page-captcha-container').length ) {
                window.loginByPhoneInPageWidgetId = window.smartCaptcha.render(
                    'login-by-phone-page-captcha-container', window.smartCaptchaConfig
                );
            }
        }*/
    });

    $(this).on('click', '.login-type-switcher', function (event) {
        var $this = $(this);

        $('.warning-message:not(.register-error)').hide();

        event.preventDefault();
        event.stopPropagation();

        let $loginByPhoneBtn = ($(this).is('.in-page') ? $('#loginByPhoneInPage') : $('#loginByPhone'));
        let $loginByEmailBtn = ($(this).is('.in-page') ? $('#loginByEmailInPage') : $('#loginByEmail'));

        $loginByPhoneBtn.toggle().attr('data-active-form', $loginByPhoneBtn.is(":visible") ? 1 : 0);
        $loginByEmailBtn.toggle().attr('data-active-form', $loginByEmailBtn.is(":visible") ? 1 : 0);

        var btnText = $this.text(),
            btnAltText = $this.data('alt-text');

        $this.data('alt-text', btnText)
            .text(btnAltText);
    });

    $(this).on('click', '.register-popup-show', function (event) {
        event.preventDefault();
        event.stopPropagation();

        $('#RegisterPopup').find('[name="phone"]').val('');
        $('#RegisterPopup').find('[name="email"]').val('');

        $('#RegisterPopup').addClass('active');
        $('#LoginPopup').removeClass('active');
        $('.blur-body').addClass('active_blur');
        $('body').addClass('no-scroll');

        // if (window.smartCaptcha) {
        //     window.registerWidgetId = window.smartCaptcha.render(
        //       'register-captcha-container', window.smartCaptchaConfig
        //     );
        // }
    });

    $(this).on('click', '.p-order-btn', function (e) {
        e.preventDefault();
        if ($(this).data("step") == 1) {
            $(".step-1").css("display", "none");
            $(".o-p-item").removeClass("active");
            $(".o-p-item:eq(1)").addClass("active");
            $(".step-2").css("display", "grid");
            $(this).data("step", 2);
        } else {
            var $form = new FormData($(this).closest('form')[0]);
            actions.personalOrder($form, $('.order-page'));
        }
    });

    $(document).on('initFilterFrame', function () {
        $('.filter-btn').unbind('click').click(function () {
            $(this).toggleClass('active');
            $('.filters-frame').toggleClass('hidden-frame');
        });
    });

    $(document).trigger('initFilterFrame');

    $(document).on('initFilterQuery', function () {
        var timerId;

        $('body').on('click', '.js-quick-search-clear', function (e) {
            $('.catalogQ').val('').trigger('keyup');
            $(this).hide();
        });

        $('body').on('keyup', '.catalogQ', function (e) {
            clearTimeout(timerId);

            let val = this.value.trim(),
                $clearBtn = $('.js-quick-search-clear');

            if (val.length > 0) {
                $clearBtn.show();
            } else {
                $clearBtn.hide();
            }

            timerId = setTimeout(function () {
                var url = new URL(window.location);

                url.searchParams.set('q', this.value);
                window.history.pushState({}, null, url.toString());

                smartFilter.keyup(this, true);
            }.bind(this), 1500);
        });

        $("#instock").bind('click', function (e) {

            /*
            var url = new URL(window.location);

            if (!this.checked) {
                url.searchParams.delete('instock');
            } else {
                url.searchParams.set('instock', this.value);
            }

            window.history.pushState({}, null, url.toString());
            */

            smartFilter.click(this);
        });

        $("#insale").bind('click', function (e) {
            var url = new URL(window.location);

            if (!this.checked) {
                url.searchParams.delete('insale');
            } else {
                url.searchParams.set('insale', this.value);
            }

            window.history.pushState({}, null, url.toString());
            smartFilter.click(this);
        });
    });

    $(document).trigger('initFilterQuery');
});


$(function () {
    window.addEventListener('onBitrixLiveChat', function (event) {
        $('.js-widget-btn').click(function (e) {
            e.preventDefault();

            $('.b24-widget-button-block').trigger('click');
        });
    });
});


// BIT-3
$(function () {
    $('body').on('change', '.js-order-recieve', function () {
        let orderPhoneVal = $('.js-order-phone').val(),
            orderNameVal = $('.js-order-name').val(),
            $orderDeliveryPhone = $('.js-order-delivery-phone'),
            $orderDeliveryName = $('.js-order-delivery-name');

        if ($(this).is(':checked')) {
            $orderDeliveryPhone.val(orderPhoneVal).trigger('change');
            $orderDeliveryName.val(orderNameVal).trigger('change');
        } else {
            $orderDeliveryPhone.val('');
            $orderDeliveryName.val('');
        }
    });

    $('body').on('click', '.js-sdek-pvz-filter-clear', function () {
        let $filterWrapper = $(this).parent(),
            $filterInput = $filterWrapper.find('.js-sdek-pvz-filter'),
            $pvzListItems = $(this).closest('#SDEK_info').find('#SDEK_wrapper p');

        $filterInput.val('');
        $pvzListItems.show();
        $filterWrapper.removeClass('not-empty');
    });

    $('body').on('keyup', '.js-sdek-pvz-filter', function () {
        let addressPart = $(this).val().toLowerCase(),
            $filterWrapper = $(this).parent(),
            $pvzListItems = $(this).closest('#SDEK_info').find('#SDEK_wrapper p');

        $pvzListItems.show();

        if (addressPart.length > 0) {
            $filterWrapper.addClass('not-empty');

            $pvzListItems.each(function () {
                let $this = $(this),
                    text = $this.text().toLowerCase();

                if (text.indexOf(addressPart) >= 0) {
                    $this.show();
                } else {
                    $this.hide();
                }
            });
        } else {
            $filterWrapper.removeClass('not-empty');

            $pvzListItems.each(function () {
                $(this).show();
            });
        }
    });
});



document.addEventListener('DOMContentLoaded', function () {
  const target = document.querySelector('.profile-nav');

  if (!target) return;

  const observer = new MutationObserver(() => {
    const $loginBtn = $('.profile-nav a:contains("Войти")');
    const $cartBtn = $('.cart-btn');
    const $count = $cartBtn.find('.count');

    if ($loginBtn.length) {
      $count.text('');
      $cartBtn.removeClass('active');
    }
  });

  observer.observe(target, {
    childList: true,
    subtree: true,
  });
});

document.addEventListener('DOMContentLoaded', function () {
  const profileNav = document.querySelector('.profile-nav');
  const cartBtn = document.querySelector('.cart-btn');
  const count = cartBtn?.querySelector('.count');

  if (!profileNav || !count) return;

  const isLoggedOut = profileNav.getAttribute('data-auth') === '0';

  if (isLoggedOut) {
    count.textContent = '';
    cartBtn.classList.remove('active');
  }
});

$(function () {
	$('body').on('click', '.js-address-delete', function(e) {
		e.preventDefault();
		
		var $addressLine = $(this).closest('.form-group'),
			$input = $addressLine.find('input');
		
        $.ajax('/local/api/checkout/deleteUserAddress.php', {
            data: 'addressID=' + $input.val(),
            error: function (e) {
                console.log('Address not deleted. Please try again.');
            },
            success: function (response) {
				let resp = JSON.parse(response);
				
				if( resp.success ) {
					$addressLine.remove();
				} else if( resp.error ) {
					console.log(resp.error);
				}
            }
        });
    });

  function updateHint(){
    var $checked = $('input.js-offer[name="model"]:checked');
    if (!$checked.length) return;

    var $block = $checked.closest('.checkbox-block');
    var available = $block.hasClass('checkbox-block-available');
    var $hint = $('.product-delivery-hint');

$hint
  .toggleClass('is-available', available)
  .toggleClass('is-preorder', !available)
  .html(available 
    ? 'Доступна быстрая доставка' 
		: 'Модель доступна под заказ 6-8 рабочих дней'
  );

  }

  $(document).on('change', 'input.js-offer[name="model"]', updateHint);

  $(updateHint);

//

function getBottomNavHeight(){
    var $nav = $('.menu-ctrls-block.mobile-ctrls-block.bottom-ctrls-block:visible').first();
    return $nav.length ? $nav.outerHeight() : 56;
  }

function findBuyButton(){
  var $root = $('.product-ctrl-block').first();
  if (!$root.length) return $();

  var $btn = $root.find('a.submit-btn.white-btn.js-cart-link[data-add-button]:visible').first();
  if ($btn.length) return $btn;

  $btn = $root.find('button, a, input[type="submit"]').filter(':visible').filter(function(){
    var t = ($(this).text() || $(this).val() || '').trim().toLowerCase();
    return t.indexOf('добавить в корзину') !== -1;
  }).first();

  return $btn;
}


  function getSelectedSizeLabel(){
    var $checked = $('input.js-offer[name="model"]:checked');
    if (!$checked.length) return '';
    var labelText = $checked.data('offer-size') || '';
    var sizeName = labelText;
    return sizeName;
  }

function syncStickyFromOriginal($orig, $stickyBtn){
    if (!$orig.length || !$stickyBtn.length) return;

    var newClass = $orig.attr('class').replace(/\bwhite-btn\b/, 'black-btn');
    $stickyBtn.attr('class', newClass + ' pdp-sticky-buy__btn');

var html = $orig.html();

try {
  var size = getSelectedSizeLabel();
  if (size) {
    var $tmp  = $('<div>').html(html);
    var $slot = $tmp.find('.offer-size').first();

    if ($slot.length) {
      $slot.attr('data-offer-size-button', size).empty();
    } else {
      var $act = $tmp.find('.action-text').first();
      $('<div class="offer-size active">')
        .attr('data-offer-size-button', size)
        .insertBefore($act.length ? $act : $tmp.children().first());
    }

    html = $tmp.html();
  }
} catch(e) { /* no-op */ }

$stickyBtn.html(html);

    $stickyBtn.prop('disabled', $orig.prop('disabled'));
    $.each($orig[0].attributes, function(){
      if (this && this.name && this.value && /^data-/.test(this.name)) {
        $stickyBtn.attr(this.name, this.value);
      }
    });
    requestAnimationFrame(function(){
      var $bar = $('.pdp-sticky-buy');
      if ($bar.length){
        document.documentElement.style.setProperty('--sticky-buy-h', $bar.outerHeight() + 'px');
      }
    });
}


  function buildStickyBar(){
    if (window.matchMedia('(min-width: 769px)').matches) return;
    var $orig = findBuyButton();
    if (!$orig.length) return;

    var $bar = $('<div class="pdp-sticky-buy wrapper" role="region" aria-label="Панель покупки"></div>');

    var $btn = $('<a href="#" class="pdp-sticky-buy__btn"></a>');

    $btn.on('click', function(e){
      e.preventDefault();
      e.stopPropagation();
      $orig.trigger('click');
    });

    $bar.append($btn);
    $('body').append($bar);

    var navH = getBottomNavHeight();
    document.documentElement.style.setProperty('--bottom-nav-h', navH + 'px');

    syncStickyFromOriginal($orig, $btn);

// Прячем оригинальную кнопку на мобилке
if (window.matchMedia('(max-width: 768px)').matches) {
    $orig.hide();
    $('.product-ctrl-block a.submit-btn.js-cart-link:not([data-add-button])')
      .removeClass('black-btn').addClass('white-btn');
}

    var recalc = function(){
      if (window.matchMedia('(min-width: 769px)').matches) return;
      var navH = getBottomNavHeight();
      document.documentElement.style.setProperty('--bottom-nav-h', navH + 'px');
      document.documentElement.style.setProperty('--sticky-buy-h', $('.pdp-sticky-buy').outerHeight() + 'px');
    };
    $(window).on('resize orientationchange', recalc);

    $(document).on('change', 'input.js-offer[name="model"]', function(){
      syncStickyFromOriginal($orig, $btn);
    });

    var mo = new MutationObserver(function(){
      syncStickyFromOriginal($orig, $btn);
    });
    mo.observe($orig.get(0), { attributes: true, childList: true, subtree: true, characterData: true });

    var $buyWrap = $('.product-ctrl-block').first();

    if ($buyWrap.length){
      var moWrap = new MutationObserver(function(){
        var $new = findBuyButton();
        if ($new.length && !$new.is($orig)){
          $orig = $new;
          syncStickyFromOriginal($orig, $btn);
        }
      });
      moWrap.observe($buyWrap.get(0), { childList: true, subtree: true });
    }
  }

  $(function(){
    buildStickyBar();
  });

//ТАБЫ

 const BREAKPOINT = 768;              
  const START_INDEX = 1;               

  const root = document.querySelector('.product-tabs-container');
  if (!root) return;

  const tabsBar   = root.querySelector('.tabs');
  const panelsBox = root.querySelector('.panels'); 
  if (!tabsBar || !panelsBox) return;

  const labels = Array.from(tabsBar.querySelectorAll('label'));
  const panels = Array.from(panelsBox.children); // <div class="panel" id="...-panel">

  let acc = root.querySelector('.accordion');
  if (!acc) {
    acc = document.createElement('div');
    acc.className = 'accordion';
    root.appendChild(acc);
  }

  function sanitizeNode(node){
    if (!node) return;
    node.removeAttribute?.('hidden');
    if (node.getAttribute?.('aria-hidden') === 'true') node.setAttribute('aria-hidden','false');
    if (node.style && node.style.display === 'none') node.style.display = '';
    node.classList?.remove('hidden','is-hidden','tab-hidden','panel--hidden','tab__panel--hidden');
    node.querySelectorAll?.('[hidden],[aria-hidden="true"]').forEach(el=>{
      el.removeAttribute('hidden'); el.setAttribute('aria-hidden','false');
    });
  }

  function buildAccordion(){
    if (acc.childElementCount) return;

    const last = Math.min(labels.length, panels.length);
    for (let i = START_INDEX; i < last; i++) {
      const srcPanel = panels[i];
      const label    = labels[i];
      if (!srcPanel || !label) continue;

      const item   = document.createElement('div');
      item.className = 'accordion-item';

      const header = document.createElement('button');
      header.type  = 'button';
      header.className = 'accordion-header';
      header.setAttribute('aria-expanded','false');

      const title = document.createElement('span');
      title.textContent = label.textContent.trim();

      const icon  = document.createElement('span');
      icon.className = 'accordion-icon';

      header.appendChild(title);
      header.appendChild(icon);

      const panel = document.createElement('div');
      panel.className = 'accordion-panel';

      const inner = document.createElement('div');
      inner.className = 'accordion-inner';


      inner.innerHTML = srcPanel.innerHTML;
      sanitizeNode(inner);

      panel.appendChild(inner);

      header.addEventListener('click', () => toggle(item, panel, header));

      item.appendChild(header);
      item.appendChild(panel);
      acc.appendChild(item);
    }

  }

  function toggle(item, panel, header){
    const isOpen = item.classList.contains('is-open');
    acc.querySelectorAll('.accordion-item.is-open').forEach(it=>{
      it.classList.remove('is-open');
      const p = it.querySelector('.accordion-panel');
      const h = it.querySelector('.accordion-header');
      if (p) p.style.maxHeight = '0px';
      if (h) h.setAttribute('aria-expanded','false');
    });
    if (!isOpen) open(item, panel, header);
  }

  function open(item, panel, header){
    item.classList.add('is-open');
    header.setAttribute('aria-expanded','true');

    sanitizeNode(panel);
    panel.style.maxHeight = 'none';
    panel.style.visibility = 'hidden';
    panel.style.display    = 'block';

    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        const h = panel.scrollHeight || panel.firstElementChild?.scrollHeight || 0;
        panel.style.visibility = 'visible';
        panel.style.maxHeight  = h + 'px';
      });
    });
  }

  function destroyAccordion(){ acc.innerHTML=''; }

  function applyMode(){
    if (window.innerWidth <= BREAKPOINT) buildAccordion();
    else destroyAccordion();
  }

  applyMode();
  window.addEventListener('resize', debounce(applyMode,150));

  function debounce(fn, d){ let t; return ()=>{ clearTimeout(t); t=setTimeout(fn,d); }; }


//ТАБЫ

});